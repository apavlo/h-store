import "ca/evanjones/protorpc/Protocol.proto";

package edu.brown.hstore;

enum Status {
    // Everything is ok with the transaction and it is allowed
    // to proceed to the next processing stage
    OK = 0;
    // Status code indicating the stored procedure executed successfully and was
    // voluntarily aborted and rolled back by the stored procedure code
    ABORT_USER = 1;
    // Status code indicating the stored procedure failed and was rolled back. There are no negative server side
    // side effects.
    ABORT_GRACEFUL = 2;
    // Status code indicating the stored procedure failed (or may never have been successfully invoked)
    // and that there may have been negative side effects on the server
    ABORT_UNEXPECTED = 3;
    // Status code indicating the connection to the database that the invocation was queued at
    // was lost before a response was received. It is possible that the invocation was sent,
    // executed, and successfully committed before a response could be returned or the 
    // invocation may never have been sent.
    ABORT_CONNECTION_LOST = 4;
    // The transaction aborted because of a misprediction (and will be restarted)
    ABORT_MISPREDICT = 5;
    // The transaction could not be initialized because on partition rejected it.
    // The transaction will be retried at the initiaizing HStoreSite
    ABORT_RESTART = 6;
    // The transaction could not be initialized because on partition rejected it.
    // The transaction will be retried at the initiaizing HStoreSite
    ABORT_REJECT = 7;
    // The transaction was rejected because the client is being throttled
    ABORT_THROTTLED = 8;
}

// -----------------------------------
// GLOBAL DATA HOLDER
// -----------------------------------

// Specifies the work to be performed at a single partition.
message WorkFragment {
    message InputDependency {
        repeated int32 ids = 1 [packed=true];
    }

    // The partition that needs to execute this work fragment
    required int32 partition_id = 1;
    
    // The PlanFragment ids that this partition will execute
    repeated int32 fragment_id = 2 [packed=true];
    
    // The list of DependencyIds that each PlanFragment needs as input
    repeated InputDependency input_dep_id = 3;
    
    // The DependencyIds that this work message will generate as output
    repeated int32 output_dep_id = 4 [packed=true];
    
    // What SQLStmt in the batch this PlanFragment belongs to
    repeated int32 stmt_index = 6 [packed=true];
    
    // What ParameterSet offset do we need for each PlanFragment
    repeated int32 param_index = 7 [packed=true];
    
    // Are all of the PlanFragments read only?
    required bool read_only = 8;
    
    // If true, then the Work embedded in this WorkFragment needs input
    required bool needs_input = 9;
    
    // If true, then this is the final fragment for this transaction at this partition.
    optional bool last_fragment = 10 [default = false];

    // If true, then this is a prefetch fragment
    optional bool prefetch = 11 [default = false];
    
    // If true, then this fragment should always be executed regardless 
    // of whether its result is cached.
    optional bool force = 12 [default = false];
}

// The output results of WorkFragments
message WorkResult {
    // What partition produced this result
    required int32 partition_id = 1;
    
    // Unique Dependency Identifers
    repeated int32 dep_id = 2 [packed=true];
    
    // Serialized VoltTables
    repeated bytes dep_data = 3;
    
    // Status of the WorkRequest
    required Status status = 4;
    
    // If this partition hit an error, this field will contain the SerializableException
    optional bytes error = 5;
}

// -----------------------------------
// INITIALIZE TRANSACTION
// -----------------------------------

// Initialization request for a new transaction
message TransactionInitRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;

    // The base partition
    required int32 base_partition = 2;

    // Procedure Id
    required int32 procedure_id = 3;
    
    // List of partitions at this site that are will be involved
    // with this transaction.
    repeated int32 partitions = 4 [packed=true];

    // -----------------------------------
    // PRE-FETCH QUERIES
    // -----------------------------------
    
    // The work that the HStoreSite needs to execute for this transaction
    // The work for a partition can appear only once in this list.
    repeated WorkFragment prefetch_fragments = 5;
    
    // Serialized ParameterSets (one per Statment).
    // The order of these elements must match WorkFragment.paramIndex
    repeated bytes prefetch_params = 6;
}

message TransactionInitResponse {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
    required Status status = 3;
    optional int32 reject_partition = 4;
    optional int64 reject_transaction_id = 5;
}

// -----------------------------------
// TRANSACTION WORK
// -----------------------------------

message TransactionWorkRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    
    // Where this request came from!
    required int32 source_partition = 2;
    
    // The work that the HStoreSite needs to execute for this transaction
    // The work for a partition can appear only once in this list.
    repeated WorkFragment fragments = 3;
    
    // Is this request for a sysproc?
    required bool sysproc = 4 [default = false];
    
    // Serialized ParameterSets (one per Statment).
    // The order of these elements must match WorkFragment.paramIndex
    repeated bytes params = 5;
    
    // We can attach input dependencies to each message
    // Unique Dependency Identifers
    repeated int32 attached_dep_id = 6 [packed=true];
    
    // Attached Serialized VoltTables
    repeated bytes attached_data = 7;
    
    // List of partitions that this transaction is done with
    // This allows us to piggyback on this message additional information
    repeated int32 done_partition = 8 [packed=true];
}

message TransactionWorkResponse {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    
    // The results for the TransactionWorkRequest
    repeated WorkResult results = 2;
    
    // The global status for this response
    required Status status = 3;
}

// -----------------------------------
// TRANSACTION PREFETCH RESPONSE
// -----------------------------------

message TransactionPrefetchResult {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    
    // The partition id where this result came from
    required int32 source_partition = 2;
    
    // The results for the prefetched queries at this partition
    required WorkResult result = 3;
    
    // The global status for this response
    required Status status = 4;
}

message TransactionPrefetchAcknowledgement {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    
    // The target partition id for this acknowledgement
    required int32 target_partition = 2;
}

// -----------------------------------
// MAP (MR JOB)
// -----------------------------------

message TransactionMapRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    required int32 base_partition = 2;
    required bytes invocation = 3;
}

message TransactionMapResponse {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
    required Status status = 3;
}

// -----------------------------------
// REDUCE (MR JOB)
// -----------------------------------

message TransactionReduceRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    required int32 base_partition = 2;
    required bytes invocation = 3;
}

message TransactionReduceResponse {
    // The output results of TransactionReduceRequest
    message ReduceResult {
        required int32 partition_id = 1;
        // Serialized response
        required bytes data = 2;
        // Status code 
        required Status status = 3;
        // If this partition hit an error, this field will contain the error message.
        optional bool error = 4 [default = false];
    }

    required int64 transaction_id = 1;
    repeated ReduceResult results = 2;
    required Status status = 3;
}

// -----------------------------------
// 2PC:PREPARE TRANSACTION
// -----------------------------------

// Two-Phase Commit Prepare
// The initiating HStoreSite is telling the remote sites to prepare to commit
// a distributed transaction for a select number of partitions.
message TransactionPrepareRequest {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
}

message TransactionPrepareResponse {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
    required Status status = 3;
}

// -----------------------------------
// 2PC:FINISH TRANSACTION
// -----------------------------------

// Two-Phase Commit Final Step
// The initiating HStoreSite is telling the remote sites that they
// they need to commit/abort their transaction. The PREPARE request
// must be sent before this one only if the status is COMMIT
message TransactionFinishRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
    required Status status = 3;
}

message TransactionFinishResponse {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
}

// -----------------------------------
// TRANSACTION REDIRECT MESSAGE
// -----------------------------------

message TransactionRedirectRequest {
    required int32 sender_site = 1;
    required bytes work = 2;
    optional int64 orig_txn_id = 3;
}

message TransactionRedirectResponse {
    // The id of the HStoreSite is responding to this shutdown request
    required int32 sender_site = 1;
    required bytes output = 2;
}

// -----------------------------------
// SEND DATA
// -----------------------------------

message SendDataRequest {
    // Globally unique transaction id
    required int64 transaction_id = 1;

    // The SiteId of the HStoreSite that sent this data
    required int32 sender_site = 2;
    
    // Set of partitions to send data to. A partition can appear only once in this list.
    // The data stored in each fragment is a serialized VoltTable
    repeated int32 dep_id = 3 [packed=true];
    
    // Attached Serialized VoltTables
    repeated bytes data = 4;
}

message SendDataResponse {
    required int64 transaction_id = 1;
    repeated int32 partitions = 2 [packed=true];
    // The SiteId of the HStoreSite that sent this data
    required int32 sender_site = 3;
    required Status status = 4;
}

// -----------------------------------
// CLUSTER INITIALIZE MESSAGE
// -----------------------------------

message InitializeRequest {
    required int32 sender_site = 1;
    required int64 instance_id = 2;
}

message InitializeResponse {
    required int32 sender_site = 1;
    required Status status = 2;
}


// -----------------------------------
// CLUSTER SHUTDOWN MESSAGE
// -----------------------------------

message ShutdownRequest {
    // The id of the HStoreSite that is wants us to shutdown
    required int32 sender_site = 1;
    required int32 exit_status = 2;
    optional bytes error = 3;
}

message ShutdownResponse {
    // The id of the HStoreSite is responding to this shutdown request
    required int32 sender_site = 1;
}

// -----------------------------------
// TIME SYNC MESSAGE
// -----------------------------------

message TimeSyncRequest {
    // The id of the HStoreSite sending this timesync request
    required int32 sender_site = 1;
    // The time when the local HStoreSite sent this request
    required int64 t0_s = 2;
}

message TimeSyncResponse {
    // The id of the HStoreSite responding to this timesync request
    required int32 sender_site = 1;
    // The time when the local HStoreSite sent this request
    required int64 t0_s = 2;
    // The time when the remote HStoreSite received this request
    required int64 t0_r = 3;
    // The time when the remote HStoreSite sent out the response
    required int64 t1_s = 4;
}

// -----------------------------------
// SERVICE
// -----------------------------------

service HStoreService {
    rpc TransactionInit(TransactionInitRequest) returns (TransactionInitResponse);
    rpc TransactionWork(TransactionWorkRequest) returns (TransactionWorkResponse);
    rpc TransactionPrefetch(TransactionPrefetchResult) returns (TransactionPrefetchAcknowledgement);
    rpc TransactionMap(TransactionMapRequest) returns (TransactionMapResponse);
    rpc TransactionReduce(TransactionReduceRequest) returns (TransactionReduceResponse);
    rpc TransactionPrepare(TransactionPrepareRequest) returns (TransactionPrepareResponse);
    rpc TransactionFinish(TransactionFinishRequest) returns (TransactionFinishResponse);
    rpc TransactionRedirect(TransactionRedirectRequest) returns (TransactionRedirectResponse);
    rpc SendData(SendDataRequest) returns (SendDataResponse);
    rpc Initialize(InitializeRequest) returns (InitializeResponse);
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
    rpc TimeSync(TimeSyncRequest) returns (TimeSyncResponse);
}
